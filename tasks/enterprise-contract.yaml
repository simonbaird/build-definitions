apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: enterprise-contract
  annotations:
    tekton.dev/displayName: Enterprise Contract
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: cosign, chains, signature
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat

spec:
  description: Run enterprise contract policy checks on a pipeline run
  serviceAccountName: enterprise-contract-sa
  params:
    - name: PIPELINE_RUN_NAME
      type: string
      description: Name of the pipeline run to run policies against
      default: ""

    - name: IMAGE_DIGEST
      type: string
      description: Digest of image to verify
      default: ""

    - name: IMAGE_URL
      type: string
      description: URL of the image to verify
      default: ""

    - name: REKOR_HOST
      type: string
      description: Rekor host for transparency log lookups
      default: rekor.sigstore.dev

    - name: POLICY_REPO
      type: string
      description: Git url for rego policies
      default: https://github.com/hacbs-contract/ec-policies.git

    - name: POLICY_REPO_REF
      type: string
      description: Git sha, branch or tag in git repo for rego policies
      default: main

  results:
    - name: OUTPUT
      description: A list of policy violations
    - name: PASSED
      description: A string formatted boolean, either true or false

  steps:
    - name: check-policies
      image: appstudio-utils
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        # Todo: Not sure if we need this
        [[ "$(workspaces.sslcertdir.bound)" == "true" ]] && export SSL_CERTS_DIR="$(workspaces.sslcertdir.path)"

        cd /appstudio-utils/util-scripts

        source ./lib/workdir.sh
        source ./lib/title.sh

        # Fetch rego files from github
        env POLICY_REPO="$(params.POLICY_REPO)" POLICY_REPO_REF="$(params.POLICY_REPO_REF)" ./fetch-ec-policies.sh

        if [[ -n "$(params.PIPELINE_RUN_NAME)" ]]; then
          # If PIPELINE_RUN_NAME is given assume we have cluster access.
          # Fetch data about the pipeline run from various sources.
          ./fetch-ec-data.sh "$(params.PIPELINE_RUN_NAME)"
        else
          # Otherwise, assume we don't have cluster access and lookup data from the registry
          # and the transparency log
          ./fetch-ec-image-data.sh "$(params.IMAGE_URL)" "$(params.IMAGE_DIGEST)" "$(params.REKOR_HOST)"
        fi

        # Run opa to check the rego rules agains the data and save the output
        title "Violations"
        ./check-ec-policy.sh | tee "$(results.OUTPUT.path)"

        # Set result to "true" or "false"
        title "Passed?"
        ./ec-pass-fail.sh "$(results.OUTPUT.path)" | tee $(results.PASSED.path)

  # Todo: Not sure if we need this
  workspaces:
  - name: sslcertdir
    optional: true
